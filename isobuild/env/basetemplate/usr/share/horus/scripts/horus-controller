#! /bin/bash

function setExtra()
{
	if [[ -n `ls -A /lib/live/mount/medium/install/rootfs/pre/*.squashfs 2> /dev/null` ]]
	then
		for i in `ls /lib/live/mount/medium/install/rootfs/pre/*.squashfs`
		do
			unsquashfs -f -x -d / $i > /dev/null 2>&1
		done
	fi
}

function setDistribParms()
{
	echo "Preparing live environment"
	[[ -z "$DISTRIBNAME" ]] && DISTRIBNAME="SphinUX"
	[[ -z "$DISTRIBVER" ]] && DISTRIBVER="1.2"
	[[ -z "$DISTRIBCODENAME" ]] && DISTRIBCODENAME="O2Pax"
	[[ -z "$DISTRIBURL" ]] && DISTRIBURL="www.sphinux.org"
	[[ -z "$DISTIRBSUPPORTURL" ]] && DISTIRBSUPPORTURL="www.sphinux.org"
	[[ -z "$BUGMAIL" ]] && BUGMAIL="dev@sphinux.org"

	sed -i -e 's,'"^DISTRIB_ID=[[:print:]]*"','"DISTRIB_ID=$DISTRIBNAME"',g' /etc/lsb-release
	sed -i -e 's,'"^NAME=[[:print:]]*"','"NAME=\"$DISTRIBNAME\""',g' /etc/os-release
	sed -i -e 's,'"^ID=[[:print:]]*"','"ID=$DISTRIBNAME"',g' /etc/os-release

	sed -i -e 's,'"^DISTRIB_RELEASE=[[:print:]]*"','"DISTRIB_RELEASE=$DISTRIBVER"',g' /etc/lsb-release
	sed -i -e 's,'"^VERSION_ID=[[:print:]]*"','"VERSION_ID=\"$DISTRIBVER\""',g' /etc/os-release

	sed -i -e 's,'"^DISTRIB_CODENAME=[[:print:]]*"','"DISTRIB_CODENAME=$DISTRIBCODENAME"',g' /etc/lsb-release
	echo "$DISTRIBCODENAME" > /etc/debian_version

	sed -i -e 's,'"^VERSION=[[:print:]]*"','"VERSION=\"$DISTRIBCODENAME ($DISTRIBVER)\""',g' /etc/os-release

	sed -i -e 's,'"^DISTRIB_DESCRIPTION=[[:print:]]*"','"DISTRIB_DESCRIPTION=\"$DISTRIBNAME $DISTRIBVER $DISTRIBCODENAME\""',g' /etc/lsb-release
	sed -i -e 's,'"^PRETTY_NAME=[[:print:]]*"','"PRETTY_NAME=\"$DISTRIBNAME $DISTRIBVER $DISTRIBCODENAME\""',g' /etc/os-release

	sed -i -e 's,'"^HOME_URL=[[:print:]]*"','"HOME_URL=\"$DISTRIBURL\""',g' /etc/os-release
	sed -i -e 's,'"^SUPPORT_URL=[[:print:]]*"','"SUPPORT_URL=\"$DISTIRBSUPPORTURL\""',g' /etc/os-release
	sed -i -e 's,'"^BUG_REPORT_URL=[[:print:]]*"','"BUG_REPORT_URL=\"$BUGMAIL\""',g' /etc/os-release

	echo "$DISTRIBNAME (StdBaseFS 1.2)" > /etc/issue
	echo "$DISTRIBNAME (StdBaseFS 1.2)" > /etc/issue.net
}

function instbasePacks()
{
	parmcont=`cat $PARMFILE | tr -d '\t' | cut -f1 -d '#' | sed '/^\s*$/d'`

	vars=`cat $PARMFILE | tr -d '\t' | cut -f1 -d '#' | sed '/^\s*$/d' | grep -E "[-,a-z,A-Z,_,0-9]*( )*=( )*" | awk -F '=' '{print $1}' | sort | uniq | tr '\n' ' '`
	varsused=`cat $PARMFILE | tr -d '\t' | cut -f1 -d '#' | sed '/^\s*$/d' | grep -Eo "[$][-,a-z,A-Z,_,0-9]*" | tr -d '$' | sort | uniq | tr '\n' ' '`

	OLDIFS="$IFS"
	IFS=$(echo -en " ")

	for i in $vars
	do
		val=`cat $PARMFILE | tr -d '\t' | cut -f1 -d '#' | sed '/^\s*$/d' | grep -E "$i*( )*=( )*" | awk -F '=' '{print $2}' | tr '\n' ' ' | tr -d '"' | tr -d "'"`
		parmcont=`echo "$parmcont" | sed -e 's,$'$i','"$val"',g'`
	done

	parmcont=`echo "$parmcont" | sed '/=/d'`

	if [[ "$vars" != "$varsused" ]]
	then
		for i in $varsused
		do
			if [[ -z `echo $vars | grep -wEo "($i)"` ]]
			then
				echo "[WARN]: Variable '$i' in '$PARMFILE' was not set, will ignore it."
				parmcont=`echo "$parmcont" | sed -e 's,$'"$i"',,g'`
			fi
		done

		for i in $vars
		do
			if [[ -z `echo $varsused | grep -wEo "($i)"` ]]
			then
				echo "[WARN]: Variable '$i' has been set but has never been used anywhere in '$PARMFILE'."
			fi
		done
	fi

	IFS="$OLDIFS"

	OLDIFS="$IFS"
	IFS=$(echo -en ";")

	for i in $parmcont
	do
		parm=`echo $i | awk -F ":" '{print $1}' | tr -d '\n' | sed -e 's/ $//g'`
		value=`echo $i | awk -F ":" '{print $2}' | tr -d '\n' | sed -e 's/ $//g'`

		case $parm in
		"installpacks")
			INSTPACKSLIST="$value"
			;;
		*)
			continue
			;;
		esac
	done

	IFS="$OLDIFS"
	PREINSTPACKS=`echo $INSTPACKSLIST | grep -o '+[-a-z,A-Z,_,0-9]*' | tr -d '+'  | tr '\n' ' '`

	if [[ -n "$PREINSTPACKS" ]]
	then
		if [[ -z `ls /lib/live/mount/medium/install/packages/*.deb` ]] || [[ -z `ls /lib/live/mount/medium/install/packages/Packages.{gz,bz2,bz} 2> /dev/null` ]]
		then
			REPLY="[FATAL]: Cannot find any packages on installation medium.\nWill quit the installation process !"
			exit 22
		fi

		apt-get update

		OLDIFS="$IFS"
		IFS=$(echo -en " ")
		for i in $PREINSTPACKS
		do
			(apt-cache show $i > /dev/null 2>&1) || exitcode="23"
			if [[ -n "$exitcode" ]]
			then
				REPLY="[FATAL]: Package '$i' is not installable.\nWill quit the installation process !"
				exit "$exitcode"
			fi
		done
		IFS="$OLDIFS"

		apt-get update > /dev/null 2>&1
		apt-get -qy --force-yes install $PREINSTPACKS > /dev/null 2>&1
	fi
}

function startFend()
{
	executable=`cat /proc/cmdline | grep -o "fend=[0-9,a-z,A-Z,/._-]*" | cut -d '=' -f2`

	if [[ -f "/tmp/horus-will-reboot" ]]
	then
		echo "Rebooting machine ..."
		. /usr/share/horus/scripts/horus-handler
		ejectCD
		reboot
	else
		[[ -f "/var/run/horus" ]] && clear
		[[ -f "/var/run/horus" ]] && return 0
		[[ -z "$executable" ]] && return 0
		echo "Executing $executable"
		touch /var/run/horus 2> /dev/null
		/sbin/getty 38400 tty2 -a live & disown
		exec $executable
		killall -9 `basename $executable` > /dev/null 2>&1
		startFend
	fi
}

cp /lib/live/mount/medium/install/horus.conf /var/cache/horus/ 2> /dev/null
cp /lib/live/mount/medium/install/*.parm /var/cache/horus/ 2> /dev/null

OLDIFS="$IFS"
IFS=$(echo -en ";")
parmcont=`cat /var/cache/horus/horus.conf | tr -d '\t' | cut -f1 -d '#' | sed '/^\s*$/d'`

for i in $parmcont
do
	parm=`echo $i | awk -F ":" '{print $1}' | tr -d '\n'`
	value=`echo $i | awk -F ":" '{print $2}' | tr -d '\n' | tr -d ' '`

	case $parm in
	"stdbasever")
		;;
	"reqspace")
		;;
	"remote")
		;;
	"distribname")
		export DISTRIBNAME="$value"
		;;
	"distribver")
		export DISTRIBVER="$value"
		;;
	"distribcodename")
		export DISTRIBCODENAME="$value"
		;;
	"distriburl")
		export DISTRIBURL="$value"
		;;
	"distribsupporturl")
		export DISTIRBSUPPORTURL="$value"
		;;
	"bugmail")
		export BUGMAIL="$value"
		;;
	"parmfile")
		export PARMFILE="$value"
		;;
	*)
		export REPLY="[FATAL]: Invalid Identifier '$parm' in parameters file: /var/cache/horus/horus.conf.\nWill quit the installation process !"
		exit 4
		;;
	esac
done

IFS="$OLDIFS"

parmkcmd=`cat /proc/cmdline | grep -o "parm=[0-9,a-z,A-Z,/._-]*" | cut -d '=' -f2`
[[ -n "$parmkcmd" ]] && export PARMFILE="$parmkcmd"
[[ -z "$PARMFILE" ]] && export PARMFILE="/var/cache/horus/backend.parm"

if [[ -z `ls -A /tmp/horus.run 2> /dev/null` ]]
then
	setExtra
	setDistribParms
	instbasePacks
	touch /tmp/horus.run
fi

startFend
