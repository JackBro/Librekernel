#! /bin/bash

DEVICE=""
PARTS=""

function clrVars()
{
	[[ -n "$1" ]] && return 255
	RETCONT=""
	REPLY=""
}

function getDevs()
{
	clrVars
	[[ -n "$1" ]] && return 255

	bootdev=`lsblk | grep /lib/live/mount/medium | awk '{print $1}'`
	[[ -z "$bootdev" ]] && bootdev="null"
	DEVS=`(for i in \`cat /proc/partitions | sed '/name/d' | sed '/sr0/d' | sed -e '/^$/d' | awk '{print "/dev/"$4,$3}' | grep '^/dev/[a-z]* ' | sed '/'"${bootdev}"'/d' | tr -s ' ' ':' | sed -e 's/:;//g'\`; do echo $i"000" | numfmt -d ':' --field=2 --to=si | sed -e 's/$/B)/g' | sed -e 's/:/:(/g'; done) | tr -s '\n' ';'`
	if [[ -z "$DEVS" ]]
	then
		REPLY=""
		RETCONT=""
		return 29
	else
		RETCONT="$DEVS"
		REPLY=""
	fi
}

function setDev()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	getDevs

	if [[ -z `echo $DEVS | grep "$1:"` ]] || [[ ! -b "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Specified device '$1' doesn't exist."
		return 3
	else
		DEVICE="$1"
	fi
}

function getParts()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	PARTS=`(parted -s $DEVICE unit MB print) | sed -E "/(Model:|Disk \/|Sector size|Partition Table:|Number|Disk Flags:)/d" | tr -s '\n' ';' | tr -s ' ' ':' | sed 's/^;$//g' | sed 's/;:/;/g' | sed 's/^;//g' | sed '/Error/d'`
	RETCONT="$PARTS"
}

function getFree()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	RETCONT=`(parted -s $DEVICE unit MB print free) | sed -E "/(Model:|Disk \/|Sector size|Partition Table:|Number)/d" | grep "Free Space" | sed 's/Free Space/Unpartitioned;/g' | tr -s '\n' ';' | tr -s ' ' ':' | sed 's/^;$//g' | sed 's/^://g' | sed "s/;:*/;/g" | sed '/Error/d'`
}

function getAll()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	getParts $DEVICE || return $?
	getFree $DEVICE || return $?

	extstart=`echo $PARTS | tr ';' '\n' | grep extended | head -n 1 | awk -F : '{print $2}' | tr -d 'MB'`
	extend=`echo $PARTS | tr ';' '\n' | grep extended | head -n 1 | awk -F : '{print $3}' | tr -d 'MB'`
	extstart=${extstart/\.*}
	extend=${extend/\/*}

	for i in `echo $RETCONT | tr ';' '\n' | grep Unpartitioned`
	do
		ofstart=`echo $i | awk -F : '{print $1}' | tr -d 'MB'`
		fstart=${ofstart/\.*}
		ofend=`echo $i | awk -F : '{print $2}' | tr -d 'MB'`
		fend=${ofend/\.*}
		ofspace=`echo $i | awk -F : '{print $3}' | tr -d 'MB'`
		fspace=${ofspace/\.*}
		if [[ "$fstart" -ge "$extstart" ]] && [[ "$fend" -le "$extend" ]] && [[ "$fspace" -gt "0" ]]
		then
			RETCONT=`echo $RETCONT | sed 's/'$ofstart'MB:'$ofend'MB:'$ofspace'MB:Unpartitioned/'$ofstart'MB:'$ofend'MB:'$ofspace'MB:+Unpartitioned/g'`
		fi
	done

	RETCONT=`(echo $RETCONT | tr ';' '\n' | sed '/^$/d' | awk -F : '{print "f"":"$1":"$2":"$3":"$4}'; echo $PARTS | tr ';' '\n' | sed '/^$/d') | sort -t : -nk2 | sed 's/^f://g' | tr '\n' ';'`
}

function getPartDat()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	DEVICE=`echo $1 | tr -d '[0-9]'`
	setDev $DEVICE || return $?

	[[ -z "$PARTS" ]] && getParts "$DEVICE"
	RETCONT=""
	part="$1"
	partnum=`echo $part | sed "s,$DEVICE,,g"`
	if [[ -z `echo $PARTS | grep -E "(^|;)$partnum:"` ]] || [[ ! -b "$part" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition doesn't exist"
		return 5
	fi

	RETCONT=`echo $PARTS | grep -Eo "(^|;)$partnum:[[:alnum:],:,(,),_,.,-]*;" | sed 's/^;//g'`
}

function chkMount()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	DEVICE=`echo $1 | tr -d '[0-9]'`
	setDev $DEVICE || return $?

	[[ -z "$PARTS" ]] && getParts "$DEVICE"
	RETCONT=""
	part="$1"
	partnum=`echo $part | sed "s,$DEVICE,,g"`
	if [[ -z `echo $PARTS | grep -E "(^|;)$partnum:"` ]] || [[ ! -b "$part" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition doesn't exist"
		return 5
	fi

	RETCONT=`df | grep -c "^$part"`
}

function chkDevMount()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	RETCONT=`df | grep "^$DEVICE" | awk '{print $1}' | tr '\n' ';'`
}

function umountPart()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	DEVICE=`echo $1 | tr -d '[0-9]'`
	setDev $DEVICE || return $?

	[[ -z "$PARTS" ]] && getParts "$DEVICE"

	part="$1"
	partnum=`echo $part | sed "s,$DEVICE,,g"`
	if [[ -z `echo $PARTS | grep -E "(^|;)$partnum:"` ]] || [[ ! -b "$part" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition doesn't exist"
		return 5
	fi

	chkMount "$part"
	if [[ "$RETCONT" != "0" ]]
	then
		umount $part 2> /dev/null
	fi

	chkMount "$part"
	if [[ "$RETCONT" != "0" ]]
	then
		REPLY=""
		return 30
	fi
	RETCONT=""
}

function umountDev()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	chkDevMount "$DEVICE"

	if [[ -n "$RETCONT" ]]
	then
		OLDIFS="$IFS"
		IFS=$(echo -en ";")

		for i in $RETCONT;
		do
			umount $i 2> /dev/null;
		done

		IFS="$OLDIFS"
	fi

	chkDevMount "$DEVICE"

	if [[ -n "$RETCONT" ]]
	then
		REPLY=""
		return 30
	fi
	RETCONT=""
}

function chkBound()
{
	clrVars
	[[ -z "$3" ]] && return 255
	[[ -n "$4" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	if [[ -n `echo $2 | tr -d '[0-9].'` ]] || [[ -n `echo $3 | tr -d '[0-9].'` ]]
	then
		RETCONT=""
		REPLY="FATAL [INTERNAL]: Partition boundaries format is incorrect, only float/integer values are allowed"
		return 11
	fi

	getFree "$DEVICE" || return $?

	for i in `echo $RETCONT | sed 's/;/\n/g'`
	do
		start=`echo $i | awk -F ':' '{print $1}' | tr -d 'MB'`
		end=`echo $i | awk -F ':' '{print $2}' | tr -d 'MB'`
		start=${start/\.*}
		end=${end/\.*}

		if [[ $2 -lt $start ]] || [[ $3 -gt $end ]]
		then
			continue
		else
			RETCONT="0"
		fi
	done

	if [[ "$RETCONT" == "0" ]]
	then
		return 0
	else
		REPLY="FATAL [INTERNAL]: Partition boundaries are not within any free space limits."
		RETCONT=""
		return 13
	fi
}

function chkPrimary()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	getParts "$DEVICE"

	prmno=`echo $RETCONT | tr ';' '\n' | grep -cE "(primary|extended)"`
	RETCONT=""
	if [[ "$prmno" -ge "4" ]]
	then
		REPLY=""
		RETCONT="$prmno"
		return 31
	fi
}

function chkExtended()
{
	clrVars
	[[ -n "$2" ]] && return 255

	if [[ -z "$DEVICE" ]] && [[ -z "$1" ]]
	then
		REPLY="FATAL [INTERNAL]: Invoking this function without block device requires invoking 'setDev()' first"
		return 4
	fi

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	getParts "$DEVICE"

	extno=`echo $RETCONT | tr ';' '\n' | grep -cE "extended"`
	RETCONT=""
	if [[ "$extno" -ge "1" ]]
	then
		REPLY=""
		RETCONT="$extno"
		return 32
	fi
}

function chkLogical()
{
	clrVars
	[[ -n "$4" ]] && return 255
	[[ -z "$3" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	getParts "$DEVICE"

	for i in `echo $RETCONT | sed 's/;/\n/g'`
	do
		type=`echo $i | awk -F ':' '{print $5}'`
		if [[ "$type" == "extended" ]]
		then
			start=`echo $i | awk -F ':' '{print $2}' | tr -d 'MB'`
			end=`echo $i | awk -F ':' '{print $3}' | tr -d 'MB'`

			if [[ $2 -lt $start ]] || [[ $3 -gt $end ]]
			then
				continue
			else
				RETCONT="0"
			fi
		fi
	done

	if [[ "$RETCONT" == "0" ]]
	then
		return 0
	else
		REPLY="FATAL [INTERNAL]: Partition boundaries are not within any free space limits."
		RETCONT=""
		return 13
	fi
}

function mkTable()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	umountDev "$DEVICE" || return $?
	chkDevMount "$DEVICE"

	if [[ -z "$RETCONT" ]]
	then
		parted -s $DEVICE mktable msdos || return 10
	fi

	getParts "$DEVICE"
	getFree "$DEVICE"
}

function getAutoBounds()
{
	clrVars
	[[ -z "$3" ]] && return 255
	[[ -n "$4" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	getAll $DEVICE || return $?

	if [[ "$2" == "primary" ]]
	then
		chkPrimary "$DEVICE" || return $?
		type="Unpartitioned"
	elif [[ "$2" == "extended" ]]
	then
		chkExtended "$DEVICE" || return $?
		type="Unpartitioned"
	elif [[ "$2" == "logical" ]]
	then
		type="+Unpartitioned"
	else
		REPLY="FATAL [INTERNAL]: Partition type can be one of the following: primary, extended, logical"
		RETCONT=""
		return 12
	fi

	if [[ -n `echo $3 | tr -d '[0-9].'` ]]
	then
		RETCONT=""
		REPLY="FATAL [INTERNAL]: Partition size format is incorrect, only float/integer values are allowed"
		return 15
	fi

	getAll $DEVICE || return $?

	freespace=`echo $RETCONT | tr ';' '\n' | grep :$type | awk -F ':' '{print $3}' | sort -nr | head -n1 | tr -d 'MB' | tr -d '\n'`
	freespace=${freespace/\.*}
	partspace=${3/\.*}

	if [[ "$freespace" -gt "$partspace" ]] && [[ -n "$freespace" ]]
	then
		boundstart=`echo $RETCONT | tr ';' '\n' | grep :$type | awk -F ':' '{print $3,$1,$2}' | sort -nr | head -n1 | tr -d 'MB' | tr -d '\n' | awk -F ' ' '{print $2}' | tr ' ' ':'`
		boundstart=${boundstart/\.*}
		[[ "$boundstart" -lt "8" ]] && boundstart=8
		boundend=$((boundstart+partspace-8))
		RETCONT="$boundstart:$boundend"
	else
		RETCONT=""
		REPLY=""
		return 33
	fi
}

function mkPart()
{
	clrVars
	[[ -z "$3" ]] && return 255
	[[ -n "$5" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	if [[ "$2" != "primary" ]] && [[ "$2" != "extended" ]] && [[ "$2" != "logical" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition type can be one of the following: primary, extended, logical"
		RETCONT=""
		return 12
	fi

	if [[ -n "$3" ]] && [[ -z "$4" ]]
	then
		getAutoBounds $DEVICE $2 $3 || return $?
		partstart=`echo $RETCONT | awk -F ':' '{print $1}' | tr -d '\n'`
		partend=`echo $RETCONT | awk -F ':' '{print $2}' | tr -d '\n'`
		chkBound "$DEVICE" "$partstart" "$partend" || return $?

		if [[ "$RETCONT" != "0" ]]
		then
			REPLY="FATAL [INTERNAL]: Partition boundaries are not within any free space limits."
			RETCONT=""
			return 13
		else
			echo "parted -s $DEVICE mkpart $2 $partstart $partend" >> /tmp/horus.part
			echo "- Creating empty $2 partition on disk '$DEVICE' between '$partstart MB' and '$partend MB'." >> /tmp/horus.ops
			chmod u+x /tmp/horus.part
		fi
	fi

	if [[ -n "$3" ]] && [[ -n "$4" ]]
	then
		chkBound "$DEVICE" "$3" "$4" || return $?
		if [[ "$RETCONT" != "0" ]]
		then
			REPLY="FATAL [INTERNAL]: Partition boundaries are not within any free space limits."
			RETCONT=""
			return 13
		else
			if [[ "$2" == "primary" ]]
			then
				chkPrimary "$DEVICE" || return $?
			elif [[ "$2" == "extended" ]]
			then
				chkExtended "$DEVICE" || return $?
			elif [[ "$2" == "logical" ]]
			then
				chkLogical "$DEVICE" "$3" "$4" || return $?
			else
				REPLY="FATAL [INTERNAL]: Partition type can be one of the following: primary, extended, logical"
				RETCONT=""
				return 12
			fi

			echo "parted -s $DEVICE mkpart $2 $3 $4" >> /tmp/horus.part
			echo "- Creating empty $2 partition on disk '$DEVICE' between '$3MB' and '$4MB'." >> /tmp/horus.ops
			chmod u+x /tmp/horus.part
		fi
	fi
	getParts $DEVICE || return $?
}

function mkFS()
{
	clrVars
	[[ -z "$2" ]] && return 255
	[[ -n "$3" ]] && return 255

	DEVICE=`echo $1 | tr -d '[0-9]'`
	setDev $DEVICE || return $?

	[[ -z "$PARTS" ]] && getParts "$DEVICE"
	RETCONT=""
	part="$1"
	partnum=`echo $part | sed "s,$DEVICE,,g"`
	if [[ -z `echo $PARTS | grep -E "(^|;)$partnum:"` ]] || [[ ! -b "$part" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition doesn't exist"
		return 5
	fi

	umountPart $part || return $?

	case $2 in
	"ext4")
		toexec="mkfs.ext4 $part"
		;;
	"ext3")
		toexec="mkfs.ext3 $part"
		;;
	"ext2")
		toexec="mkfs.ext2 $part"
		;;
	"ntfs")
		toexec="mkfs.ntfs $part"
		;;
	"fat32")
		toexec="mkdosfs -F 32 -I $part"
		;;
	"fat16")
		toexec="mkdosfs -F 16 -I $part"
		;;
	"linux-swap")
		toexec="mkswap $part"
		;;
	"ufs")
		toexec="mkfs.ufs $part"
		;;
	"minix")
		toexec="mkfs.minix $part"
		;;
	*)
		REPLY="FATAL [INTERNAL]: Unknown disk format '$2'"
		RETCONT=""
		return 17
		;;
	esac

	echo "$toexec" >> /tmp/horus.part
	echo "- Formatting '$part' to $2." >> /tmp/horus.ops
	chmod u+x /tmp/horus.part
	getParts $DEVICE || return $?
}

function mkPartFS()
{
	clrVars
	[[ -z "$4" ]] && return 255
	[[ -n "$6" ]] && return 255

	if [[ -n "$1" ]]
	then
		setDev "$1" || return $?
	fi

	if [[ "$2" != "primary" ]] && [[ "$2" != "logical" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition type can be one of the following: primary, logical"
		RETCONT=""
		return 12
	fi

	getParts $DEVICE || return $?
	oldparts="$PARTS"

	if [[ -n "$5" ]]
	then
		mkPart "$DEVICE" "$2" "$4" "$5" || return $?
	elif [[ -z "$5" ]]
	then
		mkPart "$DEVICE" "$2" "$4" || return $?
	else
		return 255
	fi

	execOps || return $?
	partprobe
	partnum=`echo $RETCONT$oldparts | tr ';' '\n' | sort | uniq -u | tr -d '\n' | awk -F ':' '{print $1}'`
	part="$DEVICE$partnum"
	mkFS $part $3 || return $?
	getParts $DEVICE || return $?
}

function delPart()
{
	clrVars
	[[ -z "$1" ]] && return 255
	[[ -n "$2" ]] && return 255

	DEVICE=`echo $1 | tr -d '[0-9]'`
	setDev $DEVICE || return $?

	[[ -z "$PARTS" ]] && getParts "$DEVICE"
	RETCONT=""
	part="$1"
	partnum=`echo $part | sed "s,$DEVICE,,g"`
	if [[ -z `echo $PARTS | grep -E "(^|;)$partnum:"` ]] || [[ ! -b "$part" ]]
	then
		REPLY="FATAL [INTERNAL]: Partition doesn't exist"
		return 5
	fi

	umountPart $part || return $?

	echo "parted -s $DEVICE rm $partnum" >> /tmp/horus.part
	echo "- Deleting $2 partition '$part' from '$DEVICE'." >> /tmp/horus.ops
	chmod u+x /tmp/horus.part
	getParts $DEVICE || return $?
}

function execOps()
{
	clrVars
	[[ -n "$1" ]] && return 255

	if [[ ! -s "/tmp/horus.part" ]] || [[ ! -f "/tmp/horus.part" ]]
	then
		REPLY=""
		RETCONT=""
		return 34
	fi

	/tmp/horus.part 2>&1 > /dev/null
	sync 2>&1 > /dev/null
	blockdev --rereadpt $DEVICE &> /dev/null
	rm /tmp/horus.part && rm /tmp/horus.ops
	getParts $DEVICE
}

function clrOps()
{
	clrVars
	[[ -n "$1" ]] && return 255

	if [[ ! -s "/tmp/horus.part" ]] || [[ ! -f "/tmp/horus.part" ]]
	then
		REPLY=""
		RETCONT=""
		return 34
	fi

	rm /tmp/horus.part && rm /tmp/horus.ops
}

function getOps()
{
	clrVars
	[[ -n "$1" ]] && return 255

	if [[ ! -s "/tmp/horus.ops" ]] || [[ ! -f "/tmp/horus.ops" ]]
	then
		REPLY=""
		RETCONT=""
		return 34
	fi

	RETCONT=`cat /tmp/horus.ops | tr '\n' ';'`
}
